@page "/edit-form-custom"
@using System.ComponentModel.DataAnnotations

<PageTitle>Form</PageTitle>

<h3>Edit-form page</h3>

<EditForm Model="@User">
    <DataAnnotationsValidator />

    <div>
        <label for="name">Namn:</label>
        <InputText @bind-Value="User.Name" id="name" />
    </div>
    <div>
        <label for="email">E-post:</label>
        <InputText @bind-Value="User.Email" id="email" />
    </div>
    <div>
        <label for="age">Ålder:</label>
        <InputNumber @bind-Value="User.Age" id="age" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText @bind-Value="User.Password" id="password" type="password"/>
    </div>
    <div>
        <label for="confirmPassword">Confirm Password:</label>
        <InputText @bind-Value="User.ConfirmPassword" id="confirmPassword" type="password" />
    </div>
    <button type="submit">Skicka</button>
    <ValidationSummary/>
</EditForm>

@code {
    private UserModel User = new UserModel();

    public class UserModel : IValidatableObject
    {
        [Required(ErrorMessage ="Namn är obligatorisk")]
        public string Name { get; set; }

        [EmailAddress(ErrorMessage ="E-postaddressen är ogiltig")]
        public string Email { get; set; }

        public int Age { get; set; }

        [Required(ErrorMessage = "Vänligen ange ett lösenord")]
        [MinLength(8, ErrorMessage = "Lösenordet måste vara minst 8 tecken")]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "Lösenorden matchar inte")]
        public string ConfirmPassword { get; set; }


        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // 1. Kontrollera att Email inte slutar med @example.com
            if (Email?.EndsWith("@example.com") == true)
            {
                yield return new ValidationResult(
                    "E-post från 'example.com' är inte tillåten.",
                    new[] { nameof(Email) });
            }

            // 2. Namnet får inte innehålla siffror
            if (!string.IsNullOrWhiteSpace(Name) && Name.Any(char.IsDigit))
            {
                yield return new ValidationResult(
                    "Namnet får inte innehålla siffror eller tomma mellanslag.",
                    new[] { nameof(Name) });
            }

            // 3. Åldern måste vara mellan 1 och 120 (extra check för säkerhet)
            if (Age < 1 || Age > 120)
            {
                yield return new ValidationResult(
                    "Åldern måste vara mellan 1 och 120.",
                    new[] { nameof(Age) });
            }
        }
    }



}